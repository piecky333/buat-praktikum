<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ghosts vs Undead</title>
    <style>
        /* Dark Theme CSS */
        :root {
            --blood-red: #8b0000;
            --zombie-green: #556b2f;
            --haunted-purple: #4b0082;
        }

        body {
            margin: 0;
            background: linear-gradient(45deg, #0a0a0a, #1a1a1a);
            color: #fff;
            font-family: 'Courier New', monospace;
            overflow: hidden;
            user-select: none;
        }

        #gameContainer {
            position: relative;
            width: 1200px;
            margin: 20px auto;
        }

        #gameCanvas {
            background: repeating-linear-gradient(
                90deg,
                rgba(50,50,50,0.1),
                rgba(50,50,50,0.1) 20px,
                rgba(0,0,0,0.1) 20px,
                rgba(0,0,0,0.1) 40px
            );
            border: 3px solid var(--blood-red);
            box-shadow: 0 0 30px var(--haunted-purple);
        }

        #uiPanel {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border: 2px solid var(--zombie-green);
        }

        .plantSlot {
            width: 60px;
            height: 60px;
            margin: 5px;
            border: 2px solid var(--blood-red);
            cursor: pointer;
            background: rgba(255,255,255,0.1);
            transition: all 0.3s;
        }

        .plantSlot:hover {
            transform: scale(1.1);
            background: rgba(255,255,255,0.2);
        }

        #scoreBoard {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            text-shadow: 2px 2px 4px black;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas" width="1200" height="600"></canvas>
        <div id="scoreBoard">Score: <span id="score">0</span></div>
        <div id="uiPanel">
            <div class="plantSlot" data-type="shooter">👻<br>50 Souls</div>
            <div class="plantSlot" data-type="slow">🧟<br>100 Souls</div>
        </div>
    </div>

<script>
// Game Engine Core
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const CELL_SIZE = 60;
const ROWS = 10;
const COLS = 20;
let score = 0;

// Game State
const gameState = {
    souls: 150,
    selectedPlant: null,
    plants: [],
    zombies: [],
    bullets: [],
    particles: [],
    gameOver: false
};

// Entity Classes
class Plant {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.type = type;
        this.health = 100;
        this.cooldown = 0;
        this.maxCooldown = type === 'shooter' ? 60 : 120;
        this.effectRadius = type === 'slow' ? 100 : 0;
    }

    update() {
        if(this.cooldown > 0) this.cooldown--;
        
        if(this.type === 'shooter' && this.cooldown === 0) {
            gameState.bullets.push(new Bullet(this.x + 40, this.y + 20));
            this.cooldown = this.maxCooldown;
        }
        
        if(this.type === 'slow') {
            gameState.zombies.forEach(zombie => {
                const distance = Math.hypot(zombie.x - this.x, zombie.y - this.y);
                if(distance < this.effectRadius) {
                    zombie.speed = 0.3;
                }
            });
        }
    }

    draw() {
        ctx.font = '40px Arial';
        ctx.fillText(this.type === 'shooter' ? '👻' : '🧟', this.x, this.y + 40);
    }
}

class Zombie {
    constructor(lane) {
        this.x = canvas.width;
        this.y = lane * CELL_SIZE + 10;
        this.speed = 1 + Math.random() * 2;
        this.health = 100;
        this.type = Math.random() > 0.8 ? 'boss' : 'normal';
    }

    update() {
        this.x -= this.speed;
        
        if(this.x < -40) {
            gameOver();
        }
    }

    draw() {
        ctx.font = '40px Arial';
        ctx.fillText(this.type === 'boss' ? '🧟♂️' : '🧟', this.x, this.y + 40);
        ctx.fillStyle = 'red';
        ctx.fillRect(this.x, this.y - 10, 40 * (this.health/100), 5);
    }
}

class Bullet {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.speed = 5;
        this.damage = 20;
    }

    update() {
        this.x += this.speed;
    }

    draw() {
        ctx.fillStyle = '#FF4500';
        ctx.beginPath();
        ctx.arc(this.x, this.y, 5, 0, Math.PI * 2);
        ctx.fill();
    }
}

// Game Systems
function spawnZombie() {
    const lane = Math.floor(Math.random() * ROWS);
    gameState.zombies.push(new Zombie(lane));
}

function placePlant(e) {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    const col = Math.floor(x / CELL_SIZE);
    const row = Math.floor(y / CELL_SIZE);
    
    if(gameState.souls >= 50 && !gameState.plants.some(p => 
        Math.floor(p.x / CELL_SIZE) === col && 
        Math.floor(p.y / CELL_SIZE) === row)) {
        
        gameState.plants.push(new Plant(col * CELL_SIZE, row * CELL_SIZE, 'shooter'));
        gameState.souls -= 50;
    }
}

function collisionCheck() {
    gameState.bullets.forEach((bullet, bIndex) => {
        gameState.zombies.forEach((zombie, zIndex) => {
            if(Math.abs(bullet.x - zombie.x) < 30 && 
               Math.abs(bullet.y - zombie.y) < 30) {
                zombie.health -= bullet.damage;
                gameState.bullets.splice(bIndex, 1);
                
                if(zombie.health <= 0) {
                    gameState.zombies.splice(zIndex, 1);
                    score += zombie.type === 'boss' ? 100 : 50;
                    spawnParticles(zombie.x, zombie.y);
                }
            }
        });
    });
}

function spawnParticles(x, y) {
    for(let i = 0; i < 10; i++) {
        gameState.particles.push({
            x: x + Math.random() * 20,
            y: y + Math.random() * 20,
            vx: (Math.random() - 0.5) * 5,
            vy: (Math.random() - 0.5) * 5,
            life: 30
        });
    }
}

function gameOver() {
    gameState.gameOver = true;
    ctx.fillStyle = 'rgba(0,0,0,0.8)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = 'red';
    ctx.font = '60px Arial';
    ctx.fillText('GAME OVER', canvas.width/2 - 150, canvas.height/2);
}

// Game Loop
function gameLoop() {
    if(gameState.gameOver) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Update entities
    gameState.plants.forEach(plant => plant.update());
    gameState.zombies.forEach(zombie => zombie.update());
    gameState.bullets.forEach(bullet => bullet.update());
    gameState.particles.forEach(p => p.life--);
    
    // Collision detection
    collisionCheck();
    
    // Cleanup
    gameState.bullets = gameState.bullets.filter(b => b.x < canvas.width);
    gameState.particles = gameState.particles.filter(p => p.life > 0);
    
    // Draw everything
    gameState.plants.forEach(plant => plant.draw());
    gameState.zombies.forEach(zombie => zombie.draw());
    gameState.bullets.forEach(bullet => bullet.draw());
    
    // Draw particles
    ctx.fillStyle = '#FF4500';
    gameState.particles.forEach(p => {
        ctx.beginPath();
        ctx.arc(p.x, p.y, 2, 0, Math.PI * 2);
        ctx.fill();
    });
    
    // UI Updates
    document.getElementById('score').textContent = score;
    
    requestAnimationFrame(gameLoop);
}

// Event Listeners
canvas.addEventListener('click', placePlant);
document.querySelectorAll('.plantSlot').forEach(slot => {
    slot.addEventListener('click', () => {
        gameState.selectedPlant = slot.dataset.type;
    });
});

// Game Initialization
setInterval(spawnZombie, 3000);
setInterval(() => score += 10, 1000); // Passive soul generation
gameLoop();
</script>
</body>
</html>
